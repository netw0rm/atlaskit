image: atlassianlabs/atlaskit:2017-02-22
pipelines:
  branches:
    master:
      - step:
          script:
            - export FORCE_COLOR=1
            - ./build/bin/setup.sh
            - ./build/bin/prep_for_release.sh
            - yarn
            - run-p -ln "validate/package.json" "validate/typescript" "lint" "test" "test/base"
            #- yarn run browserstack/tunnel/start
            #- yarn run "test/wc/browserstack"
            #- yarn run browserstack/tunnel/stop
            - yarn run release/check/is-workspace-clean --silent
            - yarn run release/check/can-ff --silent || exit 0
            - npm run release
            - run-p -ln "release/registry" "release/storybooks"
            - yarn run release/announce
    invalidate-atlaskit-cache:
      - step:
          script:
            - ./build/bin/cloudfront_invalidate.sh
    # This build will run the browserstack tests. The expected workflow is the dev on a normal branch
    # Then move the a branch that starts with `browserstack-` to run the browserstack tests
    browserstack-*:
      - step:
          script:
            - echo "Running on a browserstack branch"
            - ./build/bin/setup.sh
            - ./build/bin/prep_for_release.sh
            # We merge latest master because we dont run the bs tests in master.
            - git fetch && git merge origin/master
            - yarn
            # we could remove this step if we feel its not required/it is using too much memory
            - run-p -ln "validate/package.json" "validate/typescript" "lint" "test"
            - yarn run browserstack/tunnel/start
            - yarn run "test/wc/browserstack/pr"
            - yarn run browserstack/tunnel/stop
  default:
    - step:
        script:
          - export FORCE_COLOR=1
          - export CURRENT_BUILD_TIME=$(date +'%Y-%m-%d_%H_%m_%S')
          - ./build/bin/setup.sh
          # need to run this so we have access to the Bitbucket credentials during generate.changed.packages.file.pr.sh
          - ./build/bin/prep_for_release.sh
          - yarn
          # we have to run this after `yarn` to have access to child-process-promise
          - ./build/bin/generate.changed.packages.file.pr.sh
          # if you find yourself running into out of memory errors, we can move more steps out of this parallel step
          - run-p -ln "validate/package.json" "validate/typescript" "lint" "test" "test/base"
          #- yarn run browserstack/tunnel/start
          #- yarn run "test/wc/browserstack/pr"
          #- yarn run browserstack/tunnel/stop
          - yarn run "pr/storybook"
