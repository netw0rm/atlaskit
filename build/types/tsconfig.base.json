{
  "compilerOptions": {
    "allowJs": false,
    "experimentalDecorators": true,
    "importHelpers": true,
    "jsx": "react",
    "moduleResolution": "node",
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noImplicitAny": false,
    "sourceMap": true,
    "strictNullChecks": true,
    "target": "es5",
    "lib": [
      "dom",
      "es5",
      "scripthost",
      "es2015.collection",
      "es2015.symbol",
      "es2015.iterable",
      "es2015.promise"
    ],
    "types": [
      "chai",
      "whatwg-fetch",
      "whatwg-streams",
      "mocha",
      "react",
      "sinon",
      "enzyme"
    ]
  },
  // It might seem like a good idea to have `"include": ["../../packages/**/*"]` here, but there's
  // a subtle problem with that approach, which is that ts-loader will incur a performance hit by trying
  // to include *every* package's files when compiling a file (rather than just the files that it needs).
  //
  // Instead, each package that is written in TypeScript needs to have its own `tsconfig.json` in its root
  // that extends this file, but has an `"include": ["**/*"]` override.
  "include": [],
  // Conveniently `"exclude"` doesn't suffer the same issue, so here it is:
  "exclude": [
    "../../packages/*/node_modules"
  ],
  "files": [
    "./json-loader.d.ts",
    "./popper.d.ts",
    "./raw-loader.d.ts",
    "./webpack.d.ts"
  ]
}
