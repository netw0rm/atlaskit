// These styles will be inserted into a style tag inside
// the shadow dom of each instance of the component

// Only do class selectors in here, anything else leaks to the rest of the page in
// browsers that do not support shadow DOM
@import 'shared-variables.less';
@button-spacing: 4px;

/* These are the two mixins that give the functiionality. One for named-slots one for default */
.slot(@slotStyles; @childStyles) {
    .default-slot-wrapper {
        :host & {
            @slotStyles();
        }
    }
    .default-slot-element {
        @slotStyles();
        & > * {
            @childStyles();
        }
    }
    ::content > * {
        @childStyles();
    }
    ::slotted(*) {
        @childStyles();
    }
}

.slot(@slotname; @slotStyles; @childStyles;) {
    // native
  	.@{slotname}-slot-wrapper {
        :host & {
            @slotStyles();
        }
    }
    // polyfill
    .@{slotname}-slot-element {
        @slotStyles();
        &[name=@{slotname}] > * {
            @childStyles();
        }
    }
    ::content > [slot=@{slotname}] {
        @childStyles();
    }
    ::slotted([slot=@{slotname}]) {
        @childStyles();
    }
}
/* We simply define our styles like this. One variable for the styles applied to the slot and on for the children */
@slotStyles: {
    display: inline-flex;
    justify-content: space-between;
};
@childStyles: {
    flex: 1 1 auto;
    margin: 0 @button-spacing/2;
};

/************************************/
/************ Default slot **********/
/************************************/
 // You can also call the default slot. Make sure your slot is wrapped by a div with the class
 // of .default-slot-wrapper and the slot has a class of .default-slot-element (And no name obviously)
.slot(@slotStyles, @childStyles);
