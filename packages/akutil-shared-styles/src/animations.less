@import './animation-mixins';

// This file contains the definitions for our different animation types/curves.
// Each one works by taking in a list of properties to change and a name for the animation.
// Each of the properties is a 4-tuple of [PropertyName], [PropertyString], [PropertyStartValue], [PropertyEndValue];
// i.e. 'transform', 'translateY(XXpx)', 0, -200;

.createBoldAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      easing: cubic-bezier(0.23830050393398, 0, 0.25586732616931, 0.79011192334632);
    }
    20% {
      .calculateKeyframe(@animatedProperties, 0.8);
      easing: cubic-bezier(0.21787238302442, 0.98324004924648, 0.58694150667646, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}

.createOptimisticAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      easing: cubic-bezier(0.33333333, 0, 0.4, 1);
    }
    20% {
      .calculateKeyframe(@animatedProperties, 1.05);
      easing: cubic-bezier(0.4, 0, 0.6, 1);
    }
    76% {
      .calculateKeyframe(@animatedProperties, 0.975);
      easing: cubic-bezier(0.4, 0, 0.6, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}

.createCombinedAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      easing: cubic-bezier(0.4, 0, 0.15, 1);
    }
    50% {
      .calculateKeyframe(@animatedProperties, 1.1);
      easing: cubic-bezier(0.4, 0, 0.6, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}