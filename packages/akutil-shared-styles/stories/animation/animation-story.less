@import '../../src/mixins/animations.less';

.example {
  border: 1px dotted blue;
  width: 500px;
  padding: 10px;
  margin: 10px;
  display: inline-block;
}

.container {
  margin: auto;
  margin-top: 200px;
  width: 500px;
}

.box {
  background-color: #0049B0;
  height: 100px;
  width: 100px;
  display: inline-block;
  margin: 30px;
  color: white;
  text-align: center;
  line-height: 100px;
  font-size: 20px;
}

.buttonContainer {
  display: flex;
  justify-content: space-between;
  padding-left: 55px;
  padding-right: 50px;
}

.center-content {
  display: flex;
  justify-content: center;
}

// The following three classes are only used to style the animated boxes
// (bold, optimistic, combined)
.bold {
  border-radius: 10px;
}

.optimistic {
  border-radius: 100%;
}

.combined {
  border-radius:35px;
  transform: rotate(45deg);

  span {
    display: block;
    transform: rotate(-45deg);
  }
}

// Here we define the animation parameters for our bounce animations
@translate: 'transform', 'translateY(XXpx)', 0, -200;
@combinedTranslate: 'transform', 'translateY(XXpx) rotate(45deg)', 0, -200;

// The following three classes create and apply our new animations
// boldBounce, optimisticBounce, combinedBounce)
.boldBounce {
  animation: boldBounce 1s 1;
  // now define an animation called boldBounce
  .createBoldAnimation(@translate, 'boldBounce');
}

.optimisticBounce {
  animation: optimisticBounce 1s 1;
  .createOptimisticAnimation(@translate, 'optimisticBounce');
}

.combinedBounce {
  animation: combinedBounce 1s 1;
  // Here, we couldn't use the @translate prop because we need to keep the rotation on the object
  // So we create @combinedTranslate that has the rotation and the translation with only the translation animated.
  .createCombinedAnimation(@combinedTranslate, 'combinedBounce');
}


