@import './shared-variables.less';

@base-background-color-disabled: @ak-color-N20;
@base-background-color-focused: @ak-color-N0;
@base-background-color-hover: @ak-color-N20;
@base-background-color-subtle: transparent;
@base-background-color: @ak-color-N10;
@base-border-color-disabled: @ak-color-N20A;
@base-border-color-focused: @ak-color-B100;
@base-border-color-hover: @ak-color-N20;
@base-border-color: @ak-color-N20;
@base-border-radius: 5px;
@base-border-width-focused: 2;
@base-border-width-subtle: 0;
@base-border-width: 1;
@base-color-disabled: @ak-color-N60;
@base-color-invalid: @ak-color-R100;
@base-font-size: 14;
@base-height-compact: @grid * 8;
@base-height: @grid * 10;
@base-horizontal-padding: @grid * 2;
@base-inner-height: @grid * 5;
@base-line-height: @base-inner-height / @base-font-size;
@base-transition-duration: 0.2s; // Transition speed


// Mixin to redistribute spacing between border and padding
.borders-and-padding (@border, @x-spacing, @height) {
  border-width: unit(@border, px);
  padding: unit((@height - (2 * @border) - @base-inner-height) / 2, px) unit((@x-spacing - @border), px);

  &.paddingDisabled {
    padding: 0;
  }
}

.content-container {
  .borders-and-padding(@base-border-width, @base-horizontal-padding, @base-height);
  background-color: @base-background-color;
  border-color: @base-border-color;
  border-radius: @base-border-radius;
  border-style: solid;
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  font-size: unit(@base-font-size, px);
  justify-content: space-between;
  line-height: @base-line-height;
  max-width: 100%;
  min-height: unit(@base-inner-height, px);
  overflow: hidden;
  transition: background-color @base-transition-duration ease-in-out, border-color @base-transition-duration ease-in-out;
  word-wrap: break-word;

  &.fit-container-width {
    flex: 1 1 auto;
  }
  &.compact {
    .borders-and-padding(@base-border-width, @base-horizontal-padding, @base-height-compact);
  }
  &.subtle {
    .borders-and-padding(@base-border-width-subtle, @base-horizontal-padding, @base-height);
    background-color: @base-background-color-subtle;
  }
  &.none {
    background-color: transparent;
    border: none;
  }
  &:not(.none) {
    &:hover:not(.read-only) {
      background-color: @base-background-color-hover;
      border-color: @base-border-color-hover;
    }
    &.disabled {
      background-color: @base-background-color-disabled;
      border-color: @base-border-color-disabled;
      color: @base-color-disabled;
      cursor: not-allowed;
    }
    // note: .focused not :focus as CSS wont know that slotted content is focused
    &.focused:not(.read-only) {
      .borders-and-padding(@base-border-width-focused, @base-horizontal-padding, @base-height);
      background-color: @base-background-color-focused;
      border-color: @base-border-color-focused;

      &.compact {
        .borders-and-padding(@base-border-width-focused, @base-horizontal-padding, @base-height-compact)
      }

      &.subtle {
        &.paddingDisabled {
          margin: unit(-(@base-border-width-focused), px);
        }
      }

      &.paddingDisabled {
        margin: unit(-(@base-border-width-focused/2), px);
      }
    }
    &.invalid {
      // we run this mixin so that we get a border the same thickness as the focus style
      .borders-and-padding(@base-border-width-focused, @base-horizontal-padding, @base-height);
      border-color: @base-color-invalid;

      &.compact {
        .borders-and-padding(@base-border-width-focused, @base-horizontal-padding, @base-height-compact)
      }
      &:hover {
        background-color: @base-background-color-subtle;
        border-color: @base-color-invalid;
      }

      &.paddingDisabled {
        margin: unit(-(@base-border-width-focused/2), px);
      }
    }
  }
}

.content-wrapper {
  align-items: center;
  display: flex;
  max-width: 100%;

  &.fit-container-width {
    flex: 1 1 auto;
  }
}

.warning-icon-wrapper {
  align-items: center;
  color: @base-color-invalid;
  display: flex;
  padding-left: unit(2 * @grid, px);
  padding-right: unit(@grid, px);
}
