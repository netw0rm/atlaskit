@import './animation-mixins';

// This file contains the definitions for our different animation types/curves. These are usually
// generated by a script and hand modified where necessary.

// Creating an animation is simple as defining each of the properties you want to animate:
//   @slideUp: 'transform', 'translateY(XXpx)', 20, 0;
//   @fadeIn: 'opacity', 'XX', 0, 1;
// Each animation property is a 4-tuple of the CSS prop name to animate, a string for creating the
// value of said prop (MUST contain XX in it some where, this is where the numerical value will be
// placed), a start value and an end value.
// Then simply pass the properties and an animation name to one of the mixins below. i.e.
//   .createBoldAnimation(@slideUp @fadeIn; 'slide-up');
// If animating more than one property, pass them in space separated from eachother.
// This will output the keyframes for your new animation which can be consumed the same way as any
// other animation. i.e.
//   .slideUpAnimation {
//     animation: slide-up @animationTime @animationDelay backwards;
//   }

.createBoldAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      animation-timing-function: cubic-bezier(0.23830050393398, 0, 0.25586732616931, 0.79011192334632);
    }
    20% {
      .calculateKeyframe(@animatedProperties, 0.8);
      animation-timing-function: cubic-bezier(0.21787238302442, 0.98324004924648, 0.58694150667646, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}

.createOptimisticAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      animation-timing-function: cubic-bezier(0.33333333, 0, 0.4, 1);
    }
    20% {
      .calculateKeyframe(@animatedProperties, 1.05);
      animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);
    }
    76% {
      .calculateKeyframe(@animatedProperties, 0.975);
      animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}

.createCombinedAnimation(@animatedProperties, @animationName){
  @keyframes e(@animationName) {
    0% {
      .calculateKeyframe(@animatedProperties, 0);
      animation-timing-function: cubic-bezier(0.4, 0, 0.15, 1);
    }
    50% {
      .calculateKeyframe(@animatedProperties, 1.1);
      animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);
    }
    100% {
      .calculateKeyframe(@animatedProperties, 1);
    }
  }
}